"""
This file is part of the METIS Pipeline.
Copyright (C) 2025 European Southern Observatory

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
"""

# File containing various utils for the LSS pipeline


from astropy.io import fits
import numpy as np

# Taken from fitsWrangler!!!!
def createEmptyImage(outFile,parms):

    """
    create a FITS file for a METIS image.  Output will depend on parms file.
    A basic parms file can be generated by calling makeBasicParameters, and modified
    as desired.

    If parms['instrument'] is in ["lm","n","lss"] a  2D image will be produced.

    if parms['instrument'] is in ["ifu_image"] four 2D images will be produced.

    if parms['instrument'] is in ["ifu_cube"] four 3D cubes will be produced.

    if parms['instrument'] is in ["lss_spectrum"] a  1D spectrum will be produced.


    if parms['error'] is None a raw image will be produced, otherwise parms['error'] and parms['quality']
    are expected to be set, and three extensions will be produced for each data extention.

    if parms['data'][i]['data'] is set to None, then an array with dimensions given by parms['defaultSize'],
    set to zeros, will be generated (i = 0 except for IFU, where i = range(4).)

    If parms['header'][i] is set to a header, all values in that header will be copied over.

    After that, if parms['keywords'][i] contains keywords, they will be written to the header, overwriting
    existing values for that keyword.

    Finally, if parms['delkey'][i] contains a list of keywords, those keywords will be removed from teh
    # header (TODO!)

    The header keywords for the extension names will be forced into the ESO specified values.
    """

    # create the primary HDU
    primaryHDU = fits.PrimaryHDU()
    primaryHDU = updateHeader(primaryHDU,parms['primary'])
    hduList = [primaryHDU]

    # if this is for IFU there will be 4 sets of 3 extensions, otherwise
    # one set of three

    for i in range(len((parms['data']))):

        # if there is data provided, copy it over, otherwise create
        # empty array
        if(parms['data'][i]['data'] is None):
            imageHDU = fits.ImageHDU(np.zeros(parms['defaultSize']))
        else:
            imageHDU = fits.ImageHDU(parms['data'][i]['data'])

        # update the header
        imageHDU = updateHeader(imageHDU,parms['data'][i])

        # add required names/classes
        imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
        imageHDU.header['HDUCLAS1'] = "IMAGE"
        imageHDU.header['HDUCLAS2'] = "DATA"
        imageHDU.header['HDUCLAS3'] = ""

        # if this is a processed image, keywords for the other extentions
        if(parms['error'] is not None):
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'


        #add to the HDU list
        hduList.append(imageHDU)

        # repeat this for the mask image and the error image for processed images
        if(parms['error'] is not None):

            if(parms['quality'][i]['data'] is None):
                qualityHDU = fits.ImageHDU(np.zeros(parms['defaultSize']).astype('int'))
            else:
                qualityHDU = fits.ImageHDU(parms['quality'][i]['data'])
            qualityHDU = updateHeader(qualityHDU,parms['quality'][i])
            imageHDU.header['EXTNAME'] = "LM.DQ"
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'
            imageHDU.header['HDUCLAS1'] = "IMAGE"
            imageHDU.header['HDUCLAS2'] = "QUALITY"
            imageHDU.header['HDUCLAS3'] = "FLAG32BIT"
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
            hduList.append(qualityHDU)

            if(parms['error'][i]['data'] is None):
                errorHDU = fits.ImageHDU(np.zeros(parms['defaultSize']))
            else:
                errorHDU = fits.ImageHDU(parms['error'][i]['data'])
            errorHDU = updateHeader(errorHDU,parms['error'][i])
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.err'
            imageHDU.header['HDUCLAS1'] = "IMAGE"
            imageHDU.header['HDUCLAS2'] = "ERROR"
            imageHDU.header['HDUCLAS3'] = "RMSE"
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.dq'
            imageHDU.header['EXTNAME'] = f'{parms["instrument"]}.sci'
            hduList.append(errorHDU)

    # create the full HDU
    hdu = fits.HDUList(hduList)

    # and dumpt to file
    hdu.writeto(outFile,overwrite = True)
